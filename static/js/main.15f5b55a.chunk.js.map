{"version":3,"sources":["giphy.tsx","use-trending.ts","container.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["gf","GiphyFetch","Giphy","size","React","useState","gif","setGif","loading","setIsLoading","query","setQuery","useEffect","fetch","then","res","text","console","log","s","split","JSON","parse","data","q","default","trendingSearchesDays","trendingSearches","title","catch","err","error","useTrending","useAsync","a","search","sort","limit","width","GIFContainer","containerRef","useRef","containerSize","setContainerSize","handleResize","useCallback","current","offsetWidth","window","addEventListener","ref","style","height","App","margin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAOMA,EAAK,IAAIC,aAAW,oCAMbC,EAAyB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EAC5BC,IAAMC,SAAsB,MADA,mBAC3CC,EAD2C,KACtCC,EADsC,OCTzB,WAAO,IAAD,EACCH,IAAMC,UAAS,GADhB,mBACxBG,EADwB,KACfC,EADe,OAELL,IAAMC,SAAS,aAFV,mBAExBK,EAFwB,KAEjBC,EAFiB,KAyB/B,OArBAP,IAAMQ,WAAU,WACdH,GAAa,GACbI,MAAM,gGACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACLC,QAAQC,IAAIF,GACZ,IAAIG,EAAIH,EAAKI,MAAM,MAAM,GACzB,OAAOC,KAAKC,MAAMH,MAEnBL,MAAK,SAACS,GACL,IAAMC,EACJD,EAAKE,QAAQC,qBAAqB,GAAGC,iBAAiB,GAAGC,MAAMlB,MACjEC,EAASa,GACTf,GAAa,MAEdoB,OAAM,SAACC,GACNb,QAAQc,MAAMD,GACdrB,GAAa,QAEhB,IAEI,CAAEC,QAAOF,WDdWwB,GAAnBxB,EAF0C,EAE1CA,QAASE,EAFiC,EAEjCA,MAWjB,OATAuB,YAAQ,sBAAC,8BAAAC,EAAA,0DACH1B,EADG,iEAEgBR,EAAGmC,OAAOzB,EAAO,CACtC0B,KAAM,WACNC,MAAO,IAJF,gBAECd,EAFD,EAECA,KAIRhB,EAAOgB,EAAK,IANL,2CAON,CAACf,EAASE,IAERJ,EAEE,cAAC,MAAD,CAAKA,IAAKA,EAAKgC,MAAOnC,IAFZ,mDEvBNoC,EAAyB,WACpC,IAAMC,EAAepC,IAAMqC,OAAuB,MADR,EAEArC,IAAMC,SAAS,KAFf,mBAEnCqC,EAFmC,KAEpBC,EAFoB,KAIpCC,EAAexC,IAAMyC,aAAY,WAAO,IAAD,EACrCP,EAAK,UAAGE,EAAaM,eAAhB,aAAG,EAAsBC,YACpCT,GAASK,EAAiBL,KACzB,CAACE,IAOJ,OALApC,IAAMQ,WAAU,WACdgC,IACAI,OAAOC,iBAAiB,SAAUL,KACjC,CAACA,IAGF,qBAAKM,IAAKV,EAAcW,MAAO,CAAEC,OAAQ,QAAzC,SACE,cAAC,EAAD,CAAOjD,KAAMuC,OCPJW,MATf,WACE,OACE,sBAAKF,MAAO,CAAEG,OAAQ,SAAUhB,MAAO,OAAvC,UACE,gDACA,cAAC,EAAD,QCOSiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB3C,MAAK,YAAkD,IAA/C4C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.15f5b55a.chunk.js","sourcesContent":["import React from \"react\";\nimport { IGif } from \"@giphy/js-types\";\nimport { Gif } from \"@giphy/react-components\";\nimport { GiphyFetch } from \"@giphy/js-fetch-api\";\nimport { useAsync } from \"react-async-hook\";\nimport { useTrending } from \"./use-trending\";\n\nconst gf = new GiphyFetch(\"Nj6LZljJuQpa0hgKv8EgPADpxhgWawkH\");\n\ntype Props = {\n  size: number;\n};\n\nexport const Giphy: React.FC<Props> = ({ size }) => {\n  const [gif, setGif] = React.useState<IGif | null>(null);\n  const { loading, query } = useTrending();\n\n  useAsync(async () => {\n    if (loading) return;\n    const { data } = await gf.search(query, {\n      sort: \"relevant\",\n      limit: 1,\n    });\n    setGif(data[0]);\n  }, [loading, query]);\n\n  if (!gif) return <span>loading gif...</span>;\n\n  return <Gif gif={gif} width={size} />;\n};\n","import React from \"react\";\n\nconst api = \"https://trends.google.com/trends/api/dailytrends?geo=US\";\n\nexport const useTrending = () => {\n  const [loading, setIsLoading] = React.useState(false);\n  const [query, setQuery] = React.useState(\"not found\");\n\n  React.useEffect(() => {\n    setIsLoading(true);\n    fetch(\"https://gif-of-the-day.herokuapp.com/\" + api)\n      .then((res) => res.text())\n      .then((text) => {\n        console.log(text);\n        let s = text.split(\"\\n\")[1];\n        return JSON.parse(s);\n      })\n      .then((data) => {\n        const q =\n          data.default.trendingSearchesDays[0].trendingSearches[0].title.query;\n        setQuery(q);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return { query, loading };\n};\n","import React from \"react\";\nimport { Giphy } from \"./giphy\";\n\nexport const GIFContainer: React.FC = () => {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const [containerSize, setContainerSize] = React.useState(100);\n\n  const handleResize = React.useCallback(() => {\n    const width = containerRef.current?.offsetWidth;\n    width && setContainerSize(width);\n  }, [containerRef]);\n\n  React.useEffect(() => {\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n  }, [handleResize]);\n\n  return (\n    <div ref={containerRef} style={{ height: \"50vh\" }}>\n      <Giphy size={containerSize} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { GIFContainer } from \"./container\";\n\nfunction App() {\n  return (\n    <div style={{ margin: \"0 auto\", width: \"80%\" }}>\n      <h1>GIF of the day</h1>\n      <GIFContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}